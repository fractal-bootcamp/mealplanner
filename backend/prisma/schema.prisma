// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CATEGORY {
  PRODUCE
  MEAT
  FISH
  INTERNATIONAL
  DAIRY
  BAKING
  FROZEN
  BEVERAGES
  SNACKS
  CANNED_GOODS
  CONDIMENTS
  PASTA_AND_RICE
  BREAD_AND_BAKERY
  BREAKFAST_AND_CEREAL
  SOUPS_AND_BROTHS
  SPICES_AND_SEASONINGS
  SAUCES_AND_MARINADES
  HEALTH_AND_WELLNESS
  HOUSEHOLD_SUPPLIES
  PERSONAL_CARE
  MISC
}

enum UNIT {
  GRAMS
  KILOGRAMS
  OUNCES
  POUNDS
  TONS
  CUPS
  PINTS
  FLUID_OUNCES
  FLUID_DRAMS
  TABLESPOONS
  TEASPOONS
}

// models

// user
model User {
  // metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // fields
  email     String   @unique
  name      String?
  clerkId   String   @unique
  recipes   Recipe[]
  meals     Meal[]

  @@map("user")
}

model Recipe {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // fields
  name              String
  url               String?
  instructions      String[]
  notes             String
  servings          Int
  meals             Meal[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  recipeIngredients RecipeIngredient[]

  @@unique(name: "recipeId", fields: [userId, name])
}

model Ingredient {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  name              String             @unique
  category          CATEGORY
  recipeIngredients RecipeIngredient[]
}

model Meal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // fields
  name    String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  recipes Recipe[]

  @@unique(name: "mealId", fields: [userId, name])
}

//table relating recipes to ingredients with an associated quantity
model RecipeIngredient {
  id           String     @id @default(cuid())
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String
  quantity     Float
  unit         UNIT
  ordinal      Int

  @@unique(name: "recipeIngredientId", fields: [recipeId, ingredientId])
}
