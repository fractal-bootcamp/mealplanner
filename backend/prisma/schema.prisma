// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FoodCategory {
  PRODUCE
  MEAT
  FISH
  INTERNATIONAL
  DAIRY
  BAKING
  FROZEN
  BEVERAGES
  SNACKS
}

// models

// user
model User {
  // metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // fields
  email     String   @unique
  name      String?
  clerkId   String   @unique
  recipes   Recipe[]
  meals     Meal[]

  @@map("user")
}

model Recipe {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // fields
  name              String
  url               String?
  instructions      String[]
  notes             String
  servings          Int
  meals             Meal[]
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  recipeIngredients RecipeIngredient[]
}

model Ingredient {
  id                String             @id @default(cuid())
  name              String
  recipeIngredients RecipeIngredient[]
}

model Meal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // fields
  name    String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  recipes Recipe[]
}

//table relating recipes to ingredients with an associated quantity
model RecipeIngredient {
  id           String     @id @default(cuid())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Float
}
